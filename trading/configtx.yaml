# ----------
# SPDX-License-Identifier: Apache-2.0
# ----------
#
---
################################################################################
#   Section: Organizations
#   - This section defines the different organizational identities which will
#   be referenced later in the configuration.
################################################################################
Organizations: 

    - &Trading  # Orderer Organization
        # Defines the organization which is used in the config 
        # of the fabric.git development environment
        Name: TradingMSP

        # ID to load the MSP definition as
        ID: TradingMSP

        # MSPDir is the filesystem path which contains the MSP configuration
        MSPDir: ./rca/users/orderer0/msp

        # Policies defines the set of policies at this level of the config tree
        # For organization policies, their canonical path is usually
        #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
        Policies: 
            Readers:
                Type: Signature
                Rule: "OR('TradingMSP.admin','TradingMSP.orderer','TradingMSP.client','TradingMSP.member')"
            Writers:
                Type: Signature
                Rule: "OR('TradingMSP.admin','TradingMSP.orderer','TradingMSP.client')"
            Admins:
                Type: Signature
                Rule: "OR('TradingMSP.admin','TradingMSP.orderer')"
    
################################################################################
#   SECTION: Capabilities
#   - This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks withTrading
#   v1.0.x peers and orderers.  Capabilities define features which must beTrading
#   present in a fabric binary for that binary to safely participate in thTrading
#   fabric network.  For instance, if a new MSP type is added, newer binarTrading
#   might recognize and validate the signatures from this type, while oldeTrading
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
################################################################################
Capabilities: 

    # Orderer capabilities apply only to the orderers, and may be safely
    # used with prior release peers.
    # Set the value of the capability to true to require it.
    Orderer: &OrdererCapabilities
        # V1.4.2 for Orderer is a catchall flag for behavior which has been
        # determined to be desired for all orderers running at the v1.4.2
        # level, but which would be incompatible with orderers from prior releases.
        # Prior to enabling V1.4.2 orderer capabilities, ensure that all
        # orderers on a channel are at v1.4.2 or later.
        V1_4_2: true
        # V1.1 for Orderer enables the new non-backwards compatible
        # features and fixes of fabric v1.1
        V1_1: false

################################################################################
#   SECTION: Orderer
#   - This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters
################################################################################
Orderer: &OrdererDefaults

    # Orderer Type: The orderer implementation to start
    # Available types are "solo" and "kafka"
    OrdererType: solo

    # Addresses used to be the list of orderer addresses that clients and peers
    # could connect to.  However, this does not allow clients to associate orderer
    # addresses and orderer organizations which can be useful for things such
    # as TLS validation.  The preferred way to specify orderer addresses is now
    # to include the OrdererEndpoints item in your org definition
    Addresses:
        - orderer0.trading.blockchain.biz:6130
        - orderer1.trading.blockchain.biz:6230
        - orderer2.trading.blockchain.biz:6330
        #- orderer4.trading.blockchain.biz:6430

    # Batch Timeout: The amount of time to wait before creating a batch
    BatchTimeout: 2s

    # Batch Size: Controls the number of messages batched into a block.
    # The orderer views messages opaquely, but typically, messages may
    # be considered to be Fabric transactions.  The 'batch' is the group
    # of messages in the 'data' field of the block.  Blocks will be a few kb
    # larger than the batch size, when signatures, hashes, and other metadata
    # is applied.
    BatchSize:

        # Max Message Count: The maximum number of messages to permit in a
        # batch.  No block will contain more than this number of messages.
        MaxMessageCount: 500

        # Absolute Max Bytes: The absolute maximum number of bytes allowed for
        # the serialized messages in a batch. The maximum block size is this value
        # plus the size of the associated metadata (usually a few KB depending
        # upon the size of the signing identities). Any transaction larger than
        # this value will be rejected by ordering. If the "kafka" OrdererType is
        # selected, set 'message.max.bytes' and 'replica.fetch.max.bytes' on
        # the Kafka brokers to a value that is larger than this one.
        AbsoluteMaxBytes: 99 MB

        # Preferred Max Bytes: The preferred maximum number of bytes allowed
        # for the serialized messages in a batch. Roughly, this field may be considered
        # the best effort maximum size of a batch. A batch will fill with messages
        # until this size is reached (or the max message count, or batch timeout is
        # exceeded).  If adding a new message to the batch would cause the batch to
        # exceed the preferred max bytes, then the current batch is closed and written
        # to a block, and a new batch containing the new message is created.  If a
        # message larger than the preferred max bytes is received, then its batch
        # will contain only that message.  Because messages may be larger than
        # preferred max bytes (up to AbsoluteMaxBytes), some batches may exceed
        # the preferred max bytes, but will always contain exactly one transaction.
        PreferredMaxBytes: 2 MB

    # Max Channels is the maximum number of channels to allow on the ordering
    # network. When set to 0, this implies no maximum number of channels.
    MaxChannels: 0

    Kafka:
        # Brokers: A list of Kafka brokers to which the orderer connects
        # NOTE: Use IP:port notation
        Brokers:
            - 127.0.0.1:9092

    # EtcdRaft defines configuration which must be set when the "etcdraft"
    # orderertype is chosen.
    EtcdRaft:
        # The set of Raft replicas for this network. For the etcd/raft-based
        # implementation, we expect every replica to also be an OSN. Therefore,
        # a subset of the host:port items enumerated in this list should be
        # replicated under the Orderer MSP. Addresses key above.
        Consenters:
            - Host: orderer0.trading.blockchain.biz
              Port: 6130
              ClientTLSCert: ./rca/users/orderer0/tls-msp/signcerts/cert.pem
              ServerTLSCert: ./rca/users/orderer0/tls-msp/signcerts/cert.pem
            - Host: orderer1.trading.blockchain.biz
              Port: 6230
              ClientTLSCert: ./rca/users/orderer1/tls-msp/signcerts/cert.pem
              ServerTLSCert: ./rca/users/orderer1/tls-msp/signcerts/cert.pem
            - Host: orderer2.trading.blockchain.biz
              Port: 6330
              ClientTLSCert: ./rca/users/orderer2/tls-msp/signcerts/cert.pem
              ServerTLSCert: ./rca/users/orderer2/tls-msp/signcerts/cert.pem
            # - Host: orderer4.trading.blockchain.biz
            #   Port: 6430
            #   ClientTLSCert: ./rca/users/orderer4/tls-msp/signcerts/cert.pem
            #   ServerTLSCert: ./rca/users/orderer4/tls-msp/signcerts/cert.pem

        # Options to be specified for all the etcd/raft nodes. The values here
        # are the defaults for all new channels and can be modified on a
        # per-channel basis via configuration updates.
        Options:
            # TickInterval is the time interval between two Node.Tick invocations.
            TickInterval: 500ms

            # ElectionTick is the number of Node.Tick invocations that must pass
            # between elections. That is, if a follower does not receive any
            # message from the leader of current term before ElectionTick has
            # elapsed, it will become candidate and start an election.
            # ElectionTick must be greater than HeartbeatTick.
            ElectionTick: 10

            # HeartbeatTick is the number of Node.Tick invocations that must
            # pass between heartbeats. That is, a leader sends heartbeat
            # messages to maintain its leadership every HeartbeatTick ticks.
            HeartbeatTick: 1

            # MaxInflightBlocks limits the max number of in-flight append messages
            # during optimistic replication phase.
            MaxInflightBlocks: 5

            # SnapshotIntervalSize defines number of bytes per which a snapshot is taken
            SnapshotIntervalSize: 20 MB

    # Organizations is the list of orgs which are defined as participants on
    # the orderer side of the network
    Organizations:
        - *Trading

    # Policies defines the set of policies at this level of the config tree
    # For Orderer policies, their canonical path is
    #   /Channel/Orderer/<PolicyName>
    Policies: &OrdererDefaultPolicies
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins" # Default is MAJORITY

        # BlockValidation specifies what signatures must be included in the block
        # from the orderer for the peer to validate it.
        BlockValidation:
            Type: ImplicitMeta
            Rule: "ANY Writers"


# END