# ----------
# SPDX-License-Identifier: Apache-2.0
# ----------
#
---
################################################################################
#   Section: Organizations
#   - This section defines the different organizational identities which will
#   be referenced later in the configuration.
################################################################################
Organizations: 

    - &Trading  # Orderer Organization
        # Defines the organization which is used in the config 
        # of the fabric.git development environment
        Name: TradingMSP

        # ID to load the MSP definition as
        ID: TradingMSP

        # MSPDir is the filesystem path which contains the MSP configuration
        MSPDir: ../trading/rca/users/orderer1/msp

        # Policies defines the set of policies at this level of the config tree
        # For organization policies, their canonical path is usually
        #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
        Policies: 
            Readers:
                Type: Signature
                Rule: "OR('TradingMSP.admin','TradingMSP.orderer','TradingMSP.client','TradingMSP.member')"
            Writers:
                Type: Signature
                Rule: "OR('TradingMSP.admin','TradingMSP.orderer','TradingMSP.client')"
            Admins:
                Type: Signature
                Rule: "OR('TradingMSP.admin','TradingMSP.orderer')"

                
    - &Coffee  # Member Organization
        # Defines the organization which is used in the config 
        # of the fabric.git development environment
        Name: CoffeeMSP

        # ID to load the MSP definition as
        ID: CoffeeMSP

        MSPDir: ../coffee/rca/users/peer0/msp

        # Policies defines the set of policies at this level of the config tree
        # For organization policies, their canonical path is usually
        #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
        Policies: 
            Readers:
                Type: Signature
                Rule: "OR('CoffeeMSP.admin','CoffeeMSP.member','CoffeeMSP.peer','CoffeeMSP.client')"
            Writers:
                Type: Signature
                Rule: "OR('CoffeeMSP.admin','CoffeeMSP.member','CoffeeMSP.peer','CoffeeMSP.client')"
            Admins:
                Type: Signature
                Rule: "OR('CoffeeMSP.admin','CoffeeMSP.peer')"

        # OrdererEndpoints is a list of all orderers this org runs which clients
        # and peers may to connect to to push transactions and receive blocks respectively.
        # OrdererEndpoints:
        #     - "orderer.blockchain.biz:7050"

        AnchorPeers:
            # AnchorPeers defines the location of peers which can be used
            # for cross org gossip communication.  Note, this value is only
            # encoded in the genesis block in the Application section context
            - Host: peer0.coffee.blockchain.biz
              Port: 7134

              
    - &Juice
        # Defines the organization which is used in the config 
        # of the fabric.git development environment
        Name: JuiceMSP

        # ID to load the MSP definition as
        ID: JuiceMSP

        MSPDir: ../juice/rca/users/peer0/msp

        # Policies defines the set of policies at this level of the config tree
        # For organization policies, their canonical path is usually
        #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
        Policies: 
            Readers:
                Type: Signature
                Rule: "OR('JuiceMSP.admin','JuiceMSP.member','JuiceMSP.peer','JuiceMSP.client')"
            Writers:
                Type: Signature
                Rule: "OR('JuiceMSP.admin','JuiceMSP.member','JuiceMSP.peer','JuiceMSP.client')"
            Admins:
                Type: Signature
                Rule: "OR('JuiceMSP.admin','JuiceMSP.peer')"

        # OrdererEndpoints is a list of all orderers this org runs which clients
        # and peers may to connect to to push transactions and receive blocks respectively.
        # OrdererEndpoints:
        #     - "orderer.blockchain.biz:7050"

        AnchorPeers:
            # AnchorPeers defines the location of peers which can be used
            # for cross org gossip communication.  Note, this value is only
            # encoded in the genesis block in the Application section context
            - Host: peer0.juice.blockchain.biz
              Port: 8134


################################################################################
#   SECTION: Capabilities
#   - This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x peers and orderers.  Capabilities define features which must be
#   present in a fabric binary for that binary to safely participate in the
#   fabric network.  For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
################################################################################
Capabilities: 

    # Channel capabilities apply to both the orderers and the peers and must be
    # supported by both.
    # Set the value of the capability to true to require it.
    Channel: &ChannelCapabilities
        # V1.4.3 for Channel is a catchall flag for behavior which has been
        # determined to be desired for all orderers and peers running at the v1.4.3
        # level, but which would be incompatible with orderers and peers from
        # prior releases.
        # Prior to enabling V1.4.3 channel capabilities, ensure that all
        # orderers and peers on a channel are at v1.4.3 or later.
        V1_4_3: true
        # V1.3 for Channel enables the new non-backwards compatible
        # features and fixes of fabric v1.3
        V1_3: false
        # V1.1 for Channel enables the new non-backwards compatible
        # features and fixes of fabric v1.1
        V1_1: false

    # Orderer capabilities apply only to the orderers, and may be safely
    # used with prior release peers.
    # Set the value of the capability to true to require it.
    Orderer: &OrdererCapabilities
        # V1.4.2 for Orderer is a catchall flag for behavior which has been
        # determined to be desired for all orderers running at the v1.4.2
        # level, but which would be incompatible with orderers from prior releases.
        # Prior to enabling V1.4.2 orderer capabilities, ensure that all
        # orderers on a channel are at v1.4.2 or later.
        V1_4_2: true
        # V1.1 for Orderer enables the new non-backwards compatible
        # features and fixes of fabric v1.1
        V1_1: false

    # Application capabilities apply only to the peer network, and may be safely
    # used with prior release orderers.
    # Set the value of the capability to true to require it.
    Application: &ApplicationCapabilities
        # V1.4.2 for Application enables the new non-backwards compatible
        # features and fixes of fabric v1.4.2.
        V1_4_2: true
        # V1.3 for Application enables the new non-backwards compatible
        # features and fixes of fabric v1.3.
        V1_3: false
        # V1.2 for Application enables the new non-backwards compatible
        # features and fixes of fabric v1.2 (note, this need not be set if
        # later version capabilities are set)
        V1_2: false
        # V1.1 for Application enables the new non-backwards compatible
        # features and fixes of fabric v1.1 (note, this need not be set if
        # later version capabilities are set).
        V1_1: false

################################################################################
#   SECTION: Application
#   - This section defines the values to encode into a config transaction or
#   genesis block for application related parameters
################################################################################
Application: &ApplicationDefaults

    # Access Control List
    # https://hyperledger-fabric.readthedocs.io/en/release-1.4/access_control.html

    ACLs: &ACLsDefault
        # This section provides defaults for policies for various resources
        # in the system. These "resources" could be functions on system chaincodes
        # (e.g., "GetBlockByNumber" on the "qscc" system chaincode) or other resources
        # (e.g.,who can receive Block events). This section does NOT specify the resource's
        # definition or API, but just the ACL policy for it.
        #
        # User's can override these defaults with their own policy mapping by defining the
        # mapping under ACLs in their channel definition

        #---Lifecycle System Chaincode (lscc) function to policy mapping for access control---#

        # ACL policy for lscc's "getid" function
        lscc/ChaincodeExists: /Channel/Application/Readers

        # ACL policy for lscc's "getdepspec" function
        lscc/GetDeploymentSpec: /Channel/Application/Readers

        # ACL policy for lscc's "getccdata" function
        lscc/GetChaincodeData: /Channel/Application/Readers

        # ACL Policy for lscc's "getchaincodes" function
        lscc/GetInstantiatedChaincodes: /Channel/Application/Readers
        # lscc/GetInstantiatedChaincodes: /Channel/Application/StrictAdminPolicy

        #---Query System Chaincode (qscc) function to policy mapping for access control---#

        # ACL policy for qscc's "GetChainInfo" function
        qscc/GetChainInfo: /Channel/Application/Readers
        # qscc/GetChainInfo: /Channel/Application/StrictAdminPolicy

        # ACL policy for qscc's "GetBlockByNumber" function
        qscc/GetBlockByNumber: /Channel/Application/Readers

        # ACL policy for qscc's  "GetBlockByHash" function
        qscc/GetBlockByHash: /Channel/Application/Readers

        # ACL policy for qscc's "GetTransactionByID" function
        qscc/GetTransactionByID: /Channel/Application/Readers

        # ACL policy for qscc's "GetBlockByTxID" function
        qscc/GetBlockByTxID: /Channel/Application/Readers

        #---Configuration System Chaincode (cscc) function to policy mapping for access control---#

        # ACL policy for cscc's "GetConfigBlock" function
        cscc/GetConfigBlock: /Channel/Application/Readers

        # ACL policy for cscc's "GetConfigTree" function
        cscc/GetConfigTree: /Channel/Application/Readers

        # ACL policy for cscc's "SimulateConfigTreeUpdate" function
        cscc/SimulateConfigTreeUpdate: /Channel/Application/Readers

        #---Miscellanesous peer function to policy mapping for access control---#

        # ACL policy for invoking chaincodes on peer
        peer/Propose: /Channel/Application/Writers

        # ACL policy for chaincode to chaincode invocation
        peer/ChaincodeToChaincode: /Channel/Application/Readers

        #---Events resource to policy mapping for access control###---#

        # ACL policy for sending block events
        event/Block: /Channel/Application/Readers

        # ACL policy for sending filtered block events
        event/FilteredBlock: /Channel/Application/Readers

    # Organizations is the list of orgs which are defined as participants on
    # the application side of the network
    Organizations:
        - *Coffee
        - *Juice

    # Policies defines the set of policies at this level of the config
    # <ANY|ALL|MAJORITY>
    # For Application policies, their canonical path is
    #   /Channel/Application/<PolicyName>
    #
    #   Reference: https://medium.com/@kctheservant/illustrating-endorsement-policy-in-lifecycle-chaincode-hyperledger-fabric-release-2-0-f9f41a76e74c
    #
    Policies: &ApplicationDefaultPolicies  # &ApplicationPolicies
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins" # Default is MAJORITY
        LifecycleEndorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        Endorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        # StrictAdminPolicy:
        #     Type: ImplicitMeta
        #     Rule: "ANY Admins"

    Capabilities:
        <<: *ApplicationCapabilities

################################################################################
#   SECTION: Orderer
#   - This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters
################################################################################
Orderer: &OrdererDefaults

    # Orderer Type: The orderer implementation to start
    # Available types are "solo" and "kafka"
    # OrdererType: solo
    OrdererType: etcdraft

    # Addresses used to be the list of orderer addresses that clients and peers
    # could connect to.  However, this does not allow clients to associate orderer
    # addresses and orderer organizations which can be useful for things such
    # as TLS validation.  The preferred way to specify orderer addresses is now
    # to include the OrdererEndpoints item in your org definition
    Addresses:
        - orderer0.trading.blockchain.biz:7050
        - orderer1.trading.blockchain.biz:7050
        - orderer2.trading.blockchain.biz:7050

    # Batch Timeout: The amount of time to wait before creating a batch
    BatchTimeout: 2s

    # Batch Size: Controls the number of messages batched into a block.
    # The orderer views messages opaquely, but typically, messages may
    # be considered to be Fabric transactions.  The 'batch' is the group
    # of messages in the 'data' field of the block.  Blocks will be a few kb
    # larger than the batch size, when signatures, hashes, and other metadata
    # is applied.
    BatchSize:

        # Max Message Count: The maximum number of messages to permit in a
        # batch.  No block will contain more than this number of messages.
        MaxMessageCount: 500

        # Absolute Max Bytes: The absolute maximum number of bytes allowed for
        # the serialized messages in a batch. The maximum block size is this value
        # plus the size of the associated metadata (usually a few KB depending
        # upon the size of the signing identities). Any transaction larger than
        # this value will be rejected by ordering. If the "kafka" OrdererType is
        # selected, set 'message.max.bytes' and 'replica.fetch.max.bytes' on
        # the Kafka brokers to a value that is larger than this one.
        AbsoluteMaxBytes: 99 MB

        # Preferred Max Bytes: The preferred maximum number of bytes allowed
        # for the serialized messages in a batch. Roughly, this field may be considered
        # the best effort maximum size of a batch. A batch will fill with messages
        # until this size is reached (or the max message count, or batch timeout is
        # exceeded).  If adding a new message to the batch would cause the batch to
        # exceed the preferred max bytes, then the current batch is closed and written
        # to a block, and a new batch containing the new message is created.  If a
        # message larger than the preferred max bytes is received, then its batch
        # will contain only that message.  Because messages may be larger than
        # preferred max bytes (up to AbsoluteMaxBytes), some batches may exceed
        # the preferred max bytes, but will always contain exactly one transaction.
        PreferredMaxBytes: 2 MB

    # Max Channels is the maximum number of channels to allow on the ordering
    # network. When set to 0, this implies no maximum number of channels.
    MaxChannels: 0

    Kafka:
        # Brokers: A list of Kafka brokers to which the orderer connects
        # NOTE: Use IP:port notation
        Brokers:
            - 127.0.0.1:9092

    # EtcdRaft defines configuration which must be set when the "etcdraft"
    # orderertype is chosen.
    EtcdRaft:
        # The set of Raft replicas for this network. For the etcd/raft-based
        # implementation, we expect every replica to also be an OSN. Therefore,
        # a subset of the host:port items enumerated in this list should be
        # replicated under the Orderer MSP. Addresses key above.
        Consenters:
        - Host: orderer0.trading.blockchain.biz
          Port: 7050
          ClientTLSCert: ../trading/rca/users/orderer0/tls-msp/signcerts/cert.pem
          ServerTLSCert: ../trading/rca/users/orderer0/tls-msp/signcerts/cert.pem
        - Host: orderer1.trading.blockchain.biz
          Port: 7050
          ClientTLSCert: ../trading/rca/users/orderer1/tls-msp/signcerts/cert.pem
          ServerTLSCert: ../trading/rca/users/orderer1/tls-msp/signcerts/cert.pem
        - Host: orderer2.trading.blockchain.biz
          Port: 7050
          ClientTLSCert: ../trading/rca/users/orderer2/tls-msp/signcerts/cert.pem
          ServerTLSCert: ../trading/rca/users/orderer2/tls-msp/signcerts/cert.pem

        # Options to be specified for all the etcd/raft nodes. The values here
        # are the defaults for all new channels and can be modified on a
        # per-channel basis via configuration updates.
        # Options:
            # TickInterval is the time interval between two Node.Tick invocations.
            # TickInterval: 500ms

            # ElectionTick is the number of Node.Tick invocations that must pass
            # between elections. That is, if a follower does not receive any
            # message from the leader of current term before ElectionTick has
            # elapsed, it will become candidate and start an election.
            # ElectionTick must be greater than HeartbeatTick.
            # ElectionTick: 10

            # HeartbeatTick is the number of Node.Tick invocations that must
            # pass between heartbeats. That is, a leader sends heartbeat
            # messages to maintain its leadership every HeartbeatTick ticks.
            # HeartbeatTick: 1

            # MaxInflightBlocks limits the max number of in-flight append messages
            # during optimistic replication phase.
            # MaxInflightBlocks: 5

            # SnapshotIntervalSize defines number of bytes per which a snapshot is taken
            # SnapshotIntervalSize: 20 MB

    # Organizations is the list of orgs which are defined as participants on
    # the orderer side of the network
    Organizations:
        - *Trading

    # Policies defines the set of policies at this level of the config tree
    # For Orderer policies, their canonical path is
    #   /Channel/Orderer/<PolicyName>
    Policies: &OrdererDefaultPolicies
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins" # Default is MAJORITY

        # BlockValidation specifies what signatures must be included in the block
        # from the orderer for the peer to validate it.
        BlockValidation:
            Type: ImplicitMeta
            Rule: "ANY Writers"

################################################################################
#   CHANNEL
#   This section defines the values to encode into a config transaction or
#   genesis block for channel related parameters.
#
#   Reference: https://medium.com/@kctheservant/illustrating-endorsement-policy-in-lifecycle-chaincode-hyperledger-fabric-release-2-0-f9f41a76e74c
################################################################################
Channel: &ChannelDefaults
    # Policies defines the set of policies at this level of the config tree
    # For Channel policies, their canonical path is
    #   /Channel/<PolicyName>
    Policies: &ChannelDefaultPolicies
        # Who may invoke the 'Deliver' API
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        # Who may invoke the 'Broadcast' API
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        # By default, who may modify elements at this config level
        Admins:
            Type: ImplicitMeta
            Rule: "ANY Admins" # Default is MAJORITY
        LifecycleEndorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        Endorsement:
            Type: ImplicitMeta
            Rule: "ANY Endorsement"
        # StrictAdminPolicy:
        #     Type: ImplicitMeta
        #     Rule: "ANY Admins"
            
    # Capabilities describes the channel level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description
    Capabilities:
        <<: *ChannelCapabilities

################################################################################
#   Profile
#   - Different configuration profiles may be encoded here to be specified
#   as parameters to the configtxgen tool
################################################################################
Profiles:

    # Solo + Capabilities in Blockchain-Network for Dev Purpouses
    #
    MultiOrgOrdererSolo:
        Consortium: DrinkConsortium
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - *Trading
            Capabilities:
                <<: *OrdererCapabilities
        Consortiums:
            DrinkConsortium:
                Organizations:
                    - *Coffee
                    - *Juice
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - *Coffee
                - *Juice
            Capabilities:
                <<: *ApplicationCapabilities

    MultiOrgChannel:
        Consortium: DrinkConsortium
        <<: *ChannelDefaults
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - *Coffee
                - *Juice


    MultiOrgOrdererEtcdRaft:
        Consortium: DrinkConsortium
        <<: *ChannelDefaults
        Capabilities:
            <<: *ChannelCapabilities
        Orderer:
            <<: *OrdererDefaults
            OrdererType: etcdraft
            EtcdRaft:
                Consenters:
                - Host: orderer0.trading.blockchain.biz
                  Port: 7050
                  ClientTLSCert: ../trading/rca/users/orderer0/tls-msp/signcerts/cert.pem
                  ServerTLSCert: ../trading/rca/users/orderer0/tls-msp/signcerts/cert.pem
                - Host: orderer1.trading.blockchain.biz
                  Port: 7050
                  ClientTLSCert: ../trading/rca/users/orderer1/tls-msp/signcerts/cert.pem
                  ServerTLSCert: ../trading/rca/users/orderer1/tls-msp/signcerts/cert.pem
                - Host: orderer2.trading.blockchain.biz
                  Port: 7050
                  ClientTLSCert: ../trading/rca/users/orderer2/tls-msp/signcerts/cert.pem
                  ServerTLSCert: ../trading/rca/users/orderer2/tls-msp/signcerts/cert.pem
            Addresses:
                - orderer0.trading.blockchain.biz:7050
                - orderer1.trading.blockchain.biz:7050
                - orderer2.trading.blockchain.biz:7050
            Organizations:
                - *Trading
            Capabilities:
                <<: *OrdererCapabilities
        Consortiums:
            DrinkConsortium:
                Organizations:
                    - *Coffee
                    - *Juice
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - *Coffee
                - *Juice
            Capabilities:
                <<: *ApplicationCapabilities

# END